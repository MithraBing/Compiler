//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/srimithra/Documents/GitHub/blaise2-SrimithraBingi/src/Blaise.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Blaise2 {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class BlaiseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, KINTEGER=16, 
		KREAL=17, KBOOLEAN=18, KCHAR=19, KSET=20, KARRAY=21, KSTRING=22, INTEGER=23, 
		REAL=24, STRING=25, CHAR=26, BOOLEAN=27, IDENTIFIER=28, LPAREN=29, RPAREN=30, 
		PLUS=31, MINUS=32, TIMES=33, DIV=34, GT=35, LT=36, EQ=37, NE=38, GTE=39, 
		LTE=40, POINT=41, POW=42, SEMI=43, WS=44, COMMENTS=45, OLD_COMMENTS=46;
	public const int
		RULE_file = 0, RULE_program = 1, RULE_programDecl = 2, RULE_varBlock = 3, 
		RULE_varDecl = 4, RULE_typeExpr = 5, RULE_simpleTypeExpr = 6, RULE_arrayTypeExpr = 7, 
		RULE_setTypeExpr = 8, RULE_stat = 9, RULE_block = 10, RULE_write = 11, 
		RULE_writeln = 12, RULE_assignment = 13, RULE_routines = 14, RULE_procedure = 15, 
		RULE_function = 16, RULE_argsList = 17, RULE_expression = 18, RULE_numericAtom = 19, 
		RULE_atom = 20, RULE_functionCall = 21;
	public static readonly string[] ruleNames = {
		"file", "program", "programDecl", "varBlock", "varDecl", "typeExpr", "simpleTypeExpr", 
		"arrayTypeExpr", "setTypeExpr", "stat", "block", "write", "writeln", "assignment", 
		"routines", "procedure", "function", "argsList", "expression", "numericAtom", 
		"atom", "functionCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'program'", "'var'", "':'", "'['", "'..'", "']'", "'of'", "'begin'", 
		"'end'", "'write'", "'writeln'", "':='", "'procedure'", "'function'", 
		"','", "'integer'", "'real'", "'boolean'", "'char'", "'set'", "'array'", 
		"'string'", null, null, null, null, null, null, "'('", "')'", "'+'", "'-'", 
		"'*'", "'/'", "'>'", "'<'", "'='", "'<>'", "'>='", "'<='", "'.'", "'^'", 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "KINTEGER", "KREAL", "KBOOLEAN", "KCHAR", "KSET", 
		"KARRAY", "KSTRING", "INTEGER", "REAL", "STRING", "CHAR", "BOOLEAN", "IDENTIFIER", 
		"LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", 
		"NE", "GTE", "LTE", "POINT", "POW", "SEMI", "WS", "COMMENTS", "OLD_COMMENTS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Blaise.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BlaiseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlaiseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlaiseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BlaiseParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			program();
			State = 45;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramDeclContext programDecl() {
			return GetRuleContext<ProgramDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(BlaiseParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarBlockContext varBlock() {
			return GetRuleContext<VarBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutinesContext routines() {
			return GetRuleContext<RoutinesContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			programDecl();
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 48;
				varBlock();
				}
			}

			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__13) {
				{
				State = 51;
				routines();
				}
			}

			State = 54;
			stat();
			State = 55;
			Match(POINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BlaiseParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(BlaiseParser.SEMI, 0); }
		public ProgramDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterProgramDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitProgramDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDeclContext programDecl() {
		ProgramDeclContext _localctx = new ProgramDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_programDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(T__0);
			State = 58;
			Match(IDENTIFIER);
			State = 59;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarBlockContext : ParserRuleContext {
		public VarDeclContext _varDecl;
		public IList<VarDeclContext> _decl = new List<VarDeclContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(BlaiseParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(BlaiseParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public VarBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterVarBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitVarBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarBlockContext varBlock() {
		VarBlockContext _localctx = new VarBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_varBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__1);
			State = 65;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 62;
					_localctx._varDecl = varDecl();
					_localctx._decl.Add(_localctx._varDecl);
					State = 63;
					Match(SEMI);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BlaiseParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeExprContext typeExpr() {
			return GetRuleContext<TypeExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(IDENTIFIER);
			State = 70;
			Match(T__2);
			State = 71;
			typeExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeExprContext simpleTypeExpr() {
			return GetRuleContext<SimpleTypeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeExprContext arrayTypeExpr() {
			return GetRuleContext<ArrayTypeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetTypeExprContext setTypeExpr() {
			return GetRuleContext<SetTypeExprContext>(0);
		}
		public TypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeExprContext typeExpr() {
		TypeExprContext _localctx = new TypeExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeExpr);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KINTEGER:
			case KREAL:
			case KBOOLEAN:
			case KCHAR:
			case KSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				simpleTypeExpr();
				}
				break;
			case KARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				arrayTypeExpr();
				}
				break;
			case KSET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75;
				setTypeExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KINTEGER() { return GetToken(BlaiseParser.KINTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KREAL() { return GetToken(BlaiseParser.KREAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KBOOLEAN() { return GetToken(BlaiseParser.KBOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCHAR() { return GetToken(BlaiseParser.KCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSTRING() { return GetToken(BlaiseParser.KSTRING, 0); }
		public SimpleTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterSimpleTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitSimpleTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeExprContext simpleTypeExpr() {
		SimpleTypeExprContext _localctx = new SimpleTypeExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_simpleTypeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KINTEGER) | (1L << KREAL) | (1L << KBOOLEAN) | (1L << KCHAR) | (1L << KSTRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeExprContext : ParserRuleContext {
		public IToken startIndex;
		public IToken endIndex;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KARRAY() { return GetToken(BlaiseParser.KARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeExprContext simpleTypeExpr() {
			return GetRuleContext<SimpleTypeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(BlaiseParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(BlaiseParser.INTEGER, i);
		}
		public ArrayTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayTypeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterArrayTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitArrayTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeExprContext arrayTypeExpr() {
		ArrayTypeExprContext _localctx = new ArrayTypeExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_arrayTypeExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(KARRAY);
			State = 81;
			Match(T__3);
			State = 82;
			_localctx.startIndex = Match(INTEGER);
			State = 83;
			Match(T__4);
			State = 84;
			_localctx.endIndex = Match(INTEGER);
			State = 85;
			Match(T__5);
			State = 86;
			Match(T__6);
			State = 87;
			simpleTypeExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTypeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KSET() { return GetToken(BlaiseParser.KSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeExprContext simpleTypeExpr() {
			return GetRuleContext<SimpleTypeExprContext>(0);
		}
		public SetTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTypeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterSetTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitSetTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTypeExprContext setTypeExpr() {
		SetTypeExprContext _localctx = new SetTypeExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_setTypeExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(KSET);
			State = 90;
			Match(T__6);
			State = 91;
			simpleTypeExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteContext write() {
			return GetRuleContext<WriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WritelnContext writeln() {
			return GetRuleContext<WritelnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 18, RULE_stat);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				write();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95;
				writeln();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96;
				functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext _stat;
		public IList<StatContext> _st = new List<StatContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(BlaiseParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(BlaiseParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__7);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 101;
				_localctx._stat = stat();
				_localctx._st.Add(_localctx._stat);
				State = 102;
				Match(SEMI);
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BlaiseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BlaiseParser.RPAREN, 0); }
		public WriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteContext write() {
		WriteContext _localctx = new WriteContext(Context, State);
		EnterRule(_localctx, 22, RULE_write);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__9);
			State = 112;
			Match(LPAREN);
			State = 113;
			expression(0);
			State = 114;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WritelnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BlaiseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BlaiseParser.RPAREN, 0); }
		public WritelnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeln; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterWriteln(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitWriteln(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteln(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WritelnContext writeln() {
		WritelnContext _localctx = new WritelnContext(Context, State);
		EnterRule(_localctx, 24, RULE_writeln);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__10);
			State = 117;
			Match(LPAREN);
			State = 118;
			expression(0);
			State = 119;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BlaiseParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(IDENTIFIER);
			State = 122;
			Match(T__11);
			State = 123;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutinesContext : ParserRuleContext {
		public ProcedureContext _procedure;
		public IList<ProcedureContext> _procs = new List<ProcedureContext>();
		public FunctionContext _function;
		public IList<FunctionContext> _funcs = new List<FunctionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext[] procedure() {
			return GetRuleContexts<ProcedureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureContext procedure(int i) {
			return GetRuleContext<ProcedureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public RoutinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterRoutines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitRoutines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutinesContext routines() {
		RoutinesContext _localctx = new RoutinesContext(Context, State);
		EnterRule(_localctx, 28, RULE_routines);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 127;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
					{
					State = 125;
					_localctx._procedure = procedure();
					_localctx._procs.Add(_localctx._procedure);
					}
					break;
				case T__13:
					{
					State = 126;
					_localctx._function = function();
					_localctx._funcs.Add(_localctx._function);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__12 || _la==T__13 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BlaiseParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsListContext argsList() {
			return GetRuleContext<ArgsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(BlaiseParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(BlaiseParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarBlockContext varBlock() {
			return GetRuleContext<VarBlockContext>(0);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureContext procedure() {
		ProcedureContext _localctx = new ProcedureContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__12);
			State = 132;
			Match(IDENTIFIER);
			State = 133;
			argsList();
			State = 134;
			Match(SEMI);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 135;
				varBlock();
				}
			}

			State = 138;
			stat();
			State = 139;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BlaiseParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsListContext argsList() {
			return GetRuleContext<ArgsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExprContext typeExpr() {
			return GetRuleContext<TypeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(BlaiseParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(BlaiseParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarBlockContext varBlock() {
			return GetRuleContext<VarBlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__13);
			State = 142;
			Match(IDENTIFIER);
			State = 143;
			argsList();
			State = 144;
			Match(T__2);
			State = 145;
			typeExpr();
			State = 146;
			Match(SEMI);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 147;
				varBlock();
				}
			}

			State = 150;
			stat();
			State = 151;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsListContext : ParserRuleContext {
		public VarDeclContext _varDecl;
		public IList<VarDeclContext> _v = new List<VarDeclContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BlaiseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BlaiseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(BlaiseParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(BlaiseParser.SEMI, i);
		}
		public ArgsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsListContext argsList() {
		ArgsListContext _localctx = new ArgsListContext(Context, State);
		EnterRule(_localctx, 34, RULE_argsList);
		int _la;
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				Match(LPAREN);
				State = 154;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				Match(LPAREN);
				State = 156;
				_localctx._varDecl = varDecl();
				_localctx._v.Add(_localctx._varDecl);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMI) {
					{
					{
					State = 157;
					Match(SEMI);
					State = 158;
					_localctx._varDecl = varDecl();
					_localctx._v.Add(_localctx._varDecl);
					}
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 164;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext lhs;
		public ExpressionContext inner;
		public IToken sign;
		public IToken op;
		public ExpressionContext rhs;
		public IToken boolop;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BlaiseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BlaiseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BlaiseParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BlaiseParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(BlaiseParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(BlaiseParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BlaiseParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BlaiseParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BlaiseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BlaiseParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(BlaiseParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(BlaiseParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(BlaiseParser.LTE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 169;
				Match(LPAREN);
				State = 170;
				_localctx.inner = expression(0);
				State = 171;
				Match(RPAREN);
				}
				break;
			case INTEGER:
			case REAL:
			case PLUS:
			case MINUS:
				{
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 173;
					_localctx.sign = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						_localctx.sign = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 176;
				numericAtom();
				}
				break;
			case STRING:
			case IDENTIFIER:
				{
				State = 177;
				atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 192;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 181;
						_localctx.op = Match(POW);
						State = 182;
						_localctx.rhs = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 184;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 185;
						_localctx.rhs = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 187;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 188;
						_localctx.rhs = expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 190;
						_localctx.boolop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << EQ) | (1L << NE) | (1L << GTE) | (1L << LTE))) != 0)) ) {
							_localctx.boolop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 191;
						_localctx.rhs = expression(5);
						}
						break;
					}
					} 
				}
				State = 196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumericAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BlaiseParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(BlaiseParser.REAL, 0); }
		public NumericAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterNumericAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitNumericAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericAtomContext numericAtom() {
		NumericAtomContext _localctx = new NumericAtomContext(Context, State);
		EnterRule(_localctx, 38, RULE_numericAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==REAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BlaiseParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BlaiseParser.IDENTIFIER, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 40, RULE_atom);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _arg = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BlaiseParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BlaiseParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BlaiseParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBlaiseListener typedListener = listener as IBlaiseListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlaiseVisitor<TResult> typedVisitor = visitor as IBlaiseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(IDENTIFIER);
			State = 205;
			Match(LPAREN);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << REAL) | (1L << STRING) | (1L << IDENTIFIER) | (1L << LPAREN) | (1L << PLUS) | (1L << MINUS))) != 0)) {
				{
				State = 206;
				_localctx._expression = expression(0);
				_localctx._arg.Add(_localctx._expression);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 207;
					Match(T__14);
					State = 208;
					_localctx._expression = expression(0);
					_localctx._arg.Add(_localctx._expression);
					}
					}
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 216;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30', '\xDD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x34', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x37', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x6', '\x5', '\x44', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x45', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'O', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x65', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 'k', '\n', '\f', '\f', '\f', 
		'\xE', '\f', 'n', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', 
		'\x82', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\x83', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x8B', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x97', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xA2', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\xA5', '\v', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xA9', '\n', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xB1', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xB5', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xC3', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xC6', '\v', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\xCD', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xD4', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\xD7', '\v', '\x17', '\x5', '\x17', '\xD9', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x2', '\x3', '&', 
		'\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '\x2', '\a', '\x4', '\x2', '\x12', '\x15', '\x18', '\x18', '\x3', 
		'\x2', '!', '\"', '\x3', '\x2', '#', '$', '\x3', '\x2', '%', '*', '\x3', 
		'\x2', '\x19', '\x1A', '\x2', '\xE1', '\x2', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x31', '\x3', '\x2', '\x2', '\x2', '\x6', ';', '\x3', '\x2', 
		'\x2', '\x2', '\b', '?', '\x3', '\x2', '\x2', '\x2', '\n', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'N', '\x3', '\x2', '\x2', '\x2', '\xE', 'P', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'R', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x14', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x66', '\x3', '\x2', '\x2', '\x2', '\x18', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'v', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x81', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x85', '\x3', '\x2', '\x2', '\x2', '\"', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xA8', '\x3', '\x2', '\x2', '\x2', '&', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xC7', '\x3', '\x2', '\x2', '\x2', '*', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xCE', '\x3', '\x2', '\x2', '\x2', '.', 
		'/', '\x5', '\x4', '\x3', '\x2', '/', '\x30', '\a', '\x2', '\x2', '\x3', 
		'\x30', '\x3', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\x5', '\x6', 
		'\x4', '\x2', '\x32', '\x34', '\x5', '\b', '\x5', '\x2', '\x33', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\x5', '\x1E', 
		'\x10', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\x5', '\x14', '\v', '\x2', '\x39', ':', '\a', '+', '\x2', 
		'\x2', ':', '\x5', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\x3', 
		'\x2', '\x2', '<', '=', '\a', '\x1E', '\x2', '\x2', '=', '>', '\a', '-', 
		'\x2', '\x2', '>', '\a', '\x3', '\x2', '\x2', '\x2', '?', '\x43', '\a', 
		'\x4', '\x2', '\x2', '@', '\x41', '\x5', '\n', '\x6', '\x2', '\x41', '\x42', 
		'\a', '-', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\a', '\x1E', '\x2', '\x2', 'H', 'I', '\a', '\x5', '\x2', '\x2', 'I', 
		'J', '\x5', '\f', '\a', '\x2', 'J', '\v', '\x3', '\x2', '\x2', '\x2', 
		'K', 'O', '\x5', '\xE', '\b', '\x2', 'L', 'O', '\x5', '\x10', '\t', '\x2', 
		'M', 'O', '\x5', '\x12', '\n', '\x2', 'N', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', '\r', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\t', '\x2', '\x2', '\x2', 
		'Q', '\xF', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x17', '\x2', 
		'\x2', 'S', 'T', '\a', '\x6', '\x2', '\x2', 'T', 'U', '\a', '\x19', '\x2', 
		'\x2', 'U', 'V', '\a', '\a', '\x2', '\x2', 'V', 'W', '\a', '\x19', '\x2', 
		'\x2', 'W', 'X', '\a', '\b', '\x2', '\x2', 'X', 'Y', '\a', '\t', '\x2', 
		'\x2', 'Y', 'Z', '\x5', '\xE', '\b', '\x2', 'Z', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\a', '\x16', '\x2', '\x2', '\\', ']', '\a', 
		'\t', '\x2', '\x2', ']', '^', '\x5', '\xE', '\b', '\x2', '^', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x65', '\x5', '\x1C', '\xF', '\x2', 
		'`', '\x65', '\x5', '\x18', '\r', '\x2', '\x61', '\x65', '\x5', '\x1A', 
		'\xE', '\x2', '\x62', '\x65', '\x5', ',', '\x17', '\x2', '\x63', '\x65', 
		'\x5', '\x16', '\f', '\x2', '\x64', '_', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x64', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x15', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'l', '\a', '\n', '\x2', '\x2', 'g', 'h', '\x5', '\x14', '\v', '\x2', 'h', 
		'i', '\a', '-', '\x2', '\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 
		'g', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\a', '\v', '\x2', '\x2', 'p', '\x17', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\f', '\x2', '\x2', 'r', 's', '\a', '\x1F', '\x2', 
		'\x2', 's', 't', '\x5', '&', '\x14', '\x2', 't', 'u', '\a', ' ', '\x2', 
		'\x2', 'u', '\x19', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\r', 
		'\x2', '\x2', 'w', 'x', '\a', '\x1F', '\x2', '\x2', 'x', 'y', '\x5', '&', 
		'\x14', '\x2', 'y', 'z', '\a', ' ', '\x2', '\x2', 'z', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\a', '\x1E', '\x2', '\x2', '|', '}', '\a', 
		'\xE', '\x2', '\x2', '}', '~', '\x5', '&', '\x14', '\x2', '~', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x5', ' ', '\x11', '\x2', 
		'\x80', '\x82', '\x5', '\"', '\x12', '\x2', '\x81', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\a', '\xF', '\x2', '\x2', '\x86', '\x87', 
		'\a', '\x1E', '\x2', '\x2', '\x87', '\x88', '\x5', '$', '\x13', '\x2', 
		'\x88', '\x8A', '\a', '-', '\x2', '\x2', '\x89', '\x8B', '\x5', '\b', 
		'\x5', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x5', '\x14', '\v', '\x2', '\x8D', '\x8E', '\a', '-', 
		'\x2', '\x2', '\x8E', '!', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\a', '\x10', '\x2', '\x2', '\x90', '\x91', '\a', '\x1E', '\x2', '\x2', 
		'\x91', '\x92', '\x5', '$', '\x13', '\x2', '\x92', '\x93', '\a', '\x5', 
		'\x2', '\x2', '\x93', '\x94', '\x5', '\f', '\a', '\x2', '\x94', '\x96', 
		'\a', '-', '\x2', '\x2', '\x95', '\x97', '\x5', '\b', '\x5', '\x2', '\x96', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x5', 
		'\x14', '\v', '\x2', '\x99', '\x9A', '\a', '-', '\x2', '\x2', '\x9A', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x1F', '\x2', 
		'\x2', '\x9C', '\xA9', '\a', ' ', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'\x1F', '\x2', '\x2', '\x9E', '\xA3', '\x5', '\n', '\x6', '\x2', '\x9F', 
		'\xA0', '\a', '-', '\x2', '\x2', '\xA0', '\xA2', '\x5', '\n', '\x6', '\x2', 
		'\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', ' ', 
		'\x2', '\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '%', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\b', '\x14', 
		'\x1', '\x2', '\xAB', '\xAC', '\a', '\x1F', '\x2', '\x2', '\xAC', '\xAD', 
		'\x5', '&', '\x14', '\x2', '\xAD', '\xAE', '\a', ' ', '\x2', '\x2', '\xAE', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\t', '\x3', '\x2', 
		'\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB5', '\x5', '(', '\x15', '\x2', '\xB3', '\xB5', '\x5', '*', '\x16', 
		'\x2', '\xB4', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\f', '\t', '\x2', 
		'\x2', '\xB7', '\xB8', '\a', ',', '\x2', '\x2', '\xB8', '\xC3', '\x5', 
		'&', '\x14', '\n', '\xB9', '\xBA', '\f', '\b', '\x2', '\x2', '\xBA', '\xBB', 
		'\t', '\x4', '\x2', '\x2', '\xBB', '\xC3', '\x5', '&', '\x14', '\t', '\xBC', 
		'\xBD', '\f', '\a', '\x2', '\x2', '\xBD', '\xBE', '\t', '\x3', '\x2', 
		'\x2', '\xBE', '\xC3', '\x5', '&', '\x14', '\b', '\xBF', '\xC0', '\f', 
		'\x6', '\x2', '\x2', '\xC0', '\xC1', '\t', '\x5', '\x2', '\x2', '\xC1', 
		'\xC3', '\x5', '&', '\x14', '\a', '\xC2', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC8', '\t', '\x6', '\x2', '\x2', '\xC8', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCD', '\a', '\x1B', '\x2', '\x2', '\xCA', '\xCD', '\x5', ',', 
		'\x17', '\x2', '\xCB', '\xCD', '\a', '\x1E', '\x2', '\x2', '\xCC', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\a', '\x1E', '\x2', '\x2', '\xCF', '\xD8', 
		'\a', '\x1F', '\x2', '\x2', '\xD0', '\xD5', '\x5', '&', '\x14', '\x2', 
		'\xD1', '\xD2', '\a', '\x11', '\x2', '\x2', '\xD2', '\xD4', '\x5', '&', 
		'\x14', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', ' ', 
		'\x2', '\x2', '\xDB', '-', '\x3', '\x2', '\x2', '\x2', '\x15', '\x33', 
		'\x36', '\x45', 'N', '\x64', 'l', '\x81', '\x83', '\x8A', '\x96', '\xA3', 
		'\xA8', '\xB0', '\xB4', '\xC2', '\xC4', '\xCC', '\xD5', '\xD8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Blaise2
